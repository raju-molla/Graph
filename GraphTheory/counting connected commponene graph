//
//  DFS.cpp
//  GraphTheory
//
//  Created by RAJU MOLLA on 11/1/23.
//

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <complex>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <vector>
using namespace std;

vector<int>v[100000];
int vis[100000];
void dfs(int node){
    vis[node]= 1;
    for(auto child: v[node]){
        if(vis[child]==0){
            dfs(child);
        }
    }
}

int main(){
    int node, edge;
    cin >> node >> edge;
    
    while (edge--) {
        int x, y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    int cnt = 0;
    for(int i = 1; i <= node; i++){
        if(vis[i]==0){
            cnt++;
            dfs(i);
        }
    }
    cout << cnt << '\n';
    
    
}
